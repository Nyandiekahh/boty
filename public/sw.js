// Deriv Bot Service Worker
const CACHE_NAME = 'deriv-bot-v1';
const STATIC_CACHE_NAME = 'deriv-bot-static-v1';
const DYNAMIC_CACHE_NAME = 'deriv-bot-dynamic-v1';

// Files to cache immediately
const STATIC_ASSETS = [
    '/',
    '/index.html',
    '/manifest.json',
    '/deriv-logo.svg',
    // Add critical CSS and JS files (these will be generated by your build)
    // RSBuild will generate these with hashes, so we'll cache them dynamically
];

// Files to cache on first request
const CACHE_STRATEGIES = {
    // Cache first, then network for static assets
    CACHE_FIRST: [/\.(?:png|jpg|jpeg|svg|gif|webp|ico)$/, /\.(?:css|js)$/, /\/assets\//],
    // Network first, then cache for API calls
    NETWORK_FIRST: [/\/api\//, /deriv\.com/, /deriv\.me/],
    // Stale while revalidate for HTML pages
    STALE_WHILE_REVALIDATE: [/\.(?:html)$/],
};

// Install event - cache static assets
self.addEventListener('install', event => {
    console.log('[SW] Installing service worker...');

    event.waitUntil(
        caches
            .open(STATIC_CACHE_NAME)
            .then(cache => {
                console.log('[SW] Caching static assets');
                return cache.addAll(STATIC_ASSETS);
            })
            .then(() => {
                console.log('[SW] Static assets cached successfully');
                // Force the waiting service worker to become the active service worker
                return self.skipWaiting();
            })
            .catch(error => {
                console.error('[SW] Failed to cache static assets:', error);
            })
    );
});

// Activate event - clean up old caches
self.addEventListener('activate', event => {
    console.log('[SW] Activating service worker...');

    event.waitUntil(
        caches
            .keys()
            .then(cacheNames => {
                return Promise.all(
                    cacheNames.map(cacheName => {
                        // Delete old caches
                        if (
                            cacheName !== STATIC_CACHE_NAME &&
                            cacheName !== DYNAMIC_CACHE_NAME &&
                            cacheName !== CACHE_NAME
                        ) {
                            console.log('[SW] Deleting old cache:', cacheName);
                            return caches.delete(cacheName);
                        }
                    })
                );
            })
            .then(() => {
                console.log('[SW] Service worker activated');
                // Take control of all pages immediately
                return self.clients.claim();
            })
    );
});

// Fetch event - handle requests with different strategies
self.addEventListener('fetch', event => {
    const { request } = event;
    const url = new URL(request.url);

    // Skip non-GET requests
    if (request.method !== 'GET') {
        return;
    }

    // Skip chrome-extension and other non-http requests
    if (!request.url.startsWith('http')) {
        return;
    }

    event.respondWith(handleRequest(request, url));
});

async function handleRequest(request, url) {
    try {
        // Determine cache strategy based on URL
        const strategy = getCacheStrategy(url);

        switch (strategy) {
            case 'CACHE_FIRST':
                return await cacheFirst(request);
            case 'NETWORK_FIRST':
                return await networkFirst(request);
            case 'STALE_WHILE_REVALIDATE':
                return await staleWhileRevalidate(request);
            default:
                return await networkFirst(request);
        }
    } catch (error) {
        console.error('[SW] Request failed:', error);
        return await handleOfflineFallback(request);
    }
}

function getCacheStrategy(url) {
    const pathname = url.pathname;
    const href = url.href;

    // Check cache first patterns
    for (const pattern of CACHE_STRATEGIES.CACHE_FIRST) {
        if (pattern.test(pathname) || pattern.test(href)) {
            return 'CACHE_FIRST';
        }
    }

    // Check network first patterns
    for (const pattern of CACHE_STRATEGIES.NETWORK_FIRST) {
        if (pattern.test(pathname) || pattern.test(href)) {
            return 'NETWORK_FIRST';
        }
    }

    // Check stale while revalidate patterns
    for (const pattern of CACHE_STRATEGIES.STALE_WHILE_REVALIDATE) {
        if (pattern.test(pathname) || pattern.test(href)) {
            return 'STALE_WHILE_REVALIDATE';
        }
    }

    return 'NETWORK_FIRST';
}

// Cache first strategy - good for static assets
async function cacheFirst(request) {
    const cachedResponse = await caches.match(request);

    if (cachedResponse) {
        return cachedResponse;
    }

    try {
        const networkResponse = await fetch(request);

        if (networkResponse.ok) {
            const cache = await caches.open(DYNAMIC_CACHE_NAME);
            cache.put(request, networkResponse.clone());
        }

        return networkResponse;
    } catch (error) {
        console.error('[SW] Cache first failed:', error);
        throw error;
    }
}

// Network first strategy - good for API calls
async function networkFirst(request) {
    try {
        const networkResponse = await fetch(request);

        if (networkResponse.ok) {
            const cache = await caches.open(DYNAMIC_CACHE_NAME);
            cache.put(request, networkResponse.clone());
        }

        return networkResponse;
    } catch (error) {
        console.log('[SW] Network failed, trying cache:', request.url);
        const cachedResponse = await caches.match(request);

        if (cachedResponse) {
            return cachedResponse;
        }

        throw error;
    }
}

// Stale while revalidate - good for HTML pages
async function staleWhileRevalidate(request) {
    const cachedResponse = await caches.match(request);

    // Always try to fetch from network in background
    const networkResponsePromise = fetch(request)
        .then(networkResponse => {
            if (networkResponse.ok) {
                const cache = caches.open(DYNAMIC_CACHE_NAME);
                cache.then(c => c.put(request, networkResponse.clone()));
            }
            return networkResponse;
        })
        .catch(() => null);

    // Return cached version immediately if available
    if (cachedResponse) {
        return cachedResponse;
    }

    // Otherwise wait for network
    return (await networkResponsePromise) || handleOfflineFallback(request);
}

// Handle offline fallbacks
async function handleOfflineFallback(request) {
    // For HTML pages, return cached index.html (SPA fallback)
    if (request.headers.get('accept')?.includes('text/html')) {
        const cachedIndex = (await caches.match('/index.html')) || (await caches.match('/'));
        if (cachedIndex) {
            return cachedIndex;
        }
    }

    // For images, return a placeholder if available
    if (request.headers.get('accept')?.includes('image/')) {
        const placeholder = await caches.match('/deriv-logo.svg');
        if (placeholder) {
            return placeholder;
        }
    }

    // Return a generic offline response
    return new Response(
        JSON.stringify({
            error: 'Offline',
            message: 'This content is not available offline',
            url: request.url,
        }),
        {
            status: 503,
            statusText: 'Service Unavailable',
            headers: {
                'Content-Type': 'application/json',
            },
        }
    );
}

// Handle background sync (for future implementation)
self.addEventListener('sync', event => {
    console.log('[SW] Background sync:', event.tag);

    if (event.tag === 'background-sync') {
        event.waitUntil(doBackgroundSync());
    }
});

async function doBackgroundSync() {
    // Implement background sync logic here
    console.log('[SW] Performing background sync...');
}

// Handle push notifications (for future implementation)
self.addEventListener('push', event => {
    console.log('[SW] Push notification received:', event);

    const options = {
        body: event.data ? event.data.text() : 'New notification from Deriv Bot',
        icon: '/assets/icons/pwa/icon-192x192.png',
        badge: '/assets/icons/pwa/icon-72x72.png',
        vibrate: [100, 50, 100],
        data: {
            dateOfArrival: Date.now(),
            primaryKey: 1,
        },
        actions: [
            {
                action: 'explore',
                title: 'Open App',
                icon: '/assets/icons/IcOpen.svg',
            },
            {
                action: 'close',
                title: 'Close',
                icon: '/assets/icons/IcClose.svg',
            },
        ],
    };

    event.waitUntil(self.registration.showNotification('Deriv Bot', options));
});

// Handle notification clicks
self.addEventListener('notificationclick', event => {
    console.log('[SW] Notification clicked:', event);

    event.notification.close();

    if (event.action === 'explore') {
        event.waitUntil(self.clients.openWindow('/'));
    }
});

console.log('[SW] Service worker loaded');
